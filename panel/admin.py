import random
import openpyxl
from django.contrib import admin
from panel.models import *

from django.http import HttpResponse
from django.urls import path, reverse
from django.shortcuts import render, redirect
from django.contrib import admin, messages
from django.db import transaction
from asgiref.sync import async_to_sync
from aiogram import Bot
from config import config


from .forms import CouponGenerationForm




@admin.register(User)
class UserAdmin(admin.ModelAdmin):
    list_display = ('id', 'username', 'first_name', 'last_name', 'created_at')
    fields = ('id', 'username', 'first_name', 'last_name', 'created_at')

    exclude = ('data',)

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False


class AttachmentsInline(admin.TabularInline):
    model = Attachments

    exclude = ('file_id',)

    extra = 0


@admin.register(Mailing)
class MailingAdmin(admin.ModelAdmin):
    list_display = ['datetime', 'text', 'is_ok']
    readonly_fields = ['is_ok']
    inlines = [AttachmentsInline]



async def notify_winner_task(bot_token, chat_id, prize_description, raffle_name):
    bot = Bot(token=bot_token)
    try:
        text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∫—É–ø–æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º! üéâ\n\n"
            f"–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ ¬´{raffle_name}¬ª –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏:\n\n"
            f"üéÅ **{prize_description}**"
        )
        await bot.send_message(chat_id, text, parse_mode="Markdown")
    finally:
        await bot.session.close()


class CouponOwnerFilter(admin.SimpleListFilter):
    title = '—Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏' 
    parameter_name = 'owner_status' 

    def lookups(self, request, model_admin):
        return (
            ('activated', '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'),
            ('not_activated', '–ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'activated':
            return queryset.filter(owner__isnull=False)
        if self.value() == 'not_activated':
            return queryset.filter(owner__isnull=True)
        return queryset


@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    list_display = ('code', 'owner', 'is_used')
    list_filter = ('is_used', CouponOwnerFilter)
    search_fields = ('code', 'owner__username')
    readonly_fields = ('code',)

    @admin.display(description='–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑')
    def get_won_prize_info(self, obj):
        if hasattr(obj, 'won_prize') and obj.won_prize:
            return f"'{obj.won_prize.description}' –≤ '{obj.won_prize.raffle.name}'"
        return "‚Äî"

    actions = ['generate_coupons_action', 'export_unused_coupons_action']



    @admin.action(description='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω—ã –ø–∞—á–∫–æ–π')
    def generate_coupons_action(self, request, queryset):
        if 'apply' in request.POST:
            form = CouponGenerationForm(request.POST)
            if form.is_valid():
                quantity = form.cleaned_data['quantity']

                try:
                    with transaction.atomic():
                        coupons_to_create = [
                            Coupon(owner=None, is_used=False) for _ in range(quantity)
                        ]
                        Coupon.objects.bulk_create(coupons_to_create, ignore_conflicts=True)
                    
                    self.message_user(request, f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {quantity} –Ω–æ–≤—ã—Ö –∫—É–ø–æ–Ω–æ–≤.", messages.SUCCESS)
                    return redirect(request.get_full_path())
                
                except Exception as e:
                    self.message_user(request, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", messages.ERROR)
                    return redirect(request.get_full_path())

        else:
            form = CouponGenerationForm()
            return render(request, 'admin/generate_coupons_intermediate.html', {
                'title': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–ø–æ–Ω–æ–≤',
                'queryset': queryset,
                'form': form
            })
        

    @admin.action(description='–í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã –≤ Excel')
    def export_unused_coupons_action(self, request, queryset):
        coupons_to_export = Coupon.objects.filter(owner__isnull=True, is_used=False).order_by('code')

        if not coupons_to_export.exists():
            self.message_user(request, "–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.", messages.WARNING)
            return

        workbook = openpyxl.Workbook()
        worksheet = workbook.active
        worksheet.title = '–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω—ã'

        worksheet.append(['–ö–æ–¥ –∫—É–ø–æ–Ω–∞'])

        for code, in coupons_to_export.values_list('code'):
            worksheet.append([code])
        
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        )
        response['Content-Disposition'] = 'attachment; filename="unused_coupons.xlsx"'
        
        workbook.save(response)
        return response


class PrizeInline(admin.TabularInline):
    model = Prize
    extra = 1
    readonly_fields = ('winner_coupon',)

@admin.register(Raffle)
class RaffleAdmin(admin.ModelAdmin):
    list_display = ('name', 'created_at', 'is_finished')
    list_filter = ('is_finished',)
    inlines = [PrizeInline]
    actions = ['run_raffle_action']
    ordering = ['-created_at']

    @admin.action(description='–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏')
    def run_raffle_action(self, request, queryset):
        BOT_TOKEN = config.BOT_TOKEN

        for raffle in queryset.filter(is_finished=False):
            prizes_to_award = list(raffle.prizes.all())
            available_coupons = list(Coupon.objects.filter(owner__isnull=False, is_used=False))

            
            if not prizes_to_award:
                self.message_user(request, f"–û—à–∏–±–∫–∞: –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ '{raffle.name}' –Ω–µ—Ç –ø—Ä–∏–∑–æ–≤. –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω.", level=messages.ERROR)
                continue 

            if not available_coupons:
                self.message_user(request, f"–†–æ–∑—ã–≥—Ä—ã—à '{raffle.name}' –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –±—ã–ª–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è.", level=messages.WARNING)
                raffle.is_finished = True 
                raffle.save()
                continue
            
            coupon_ids_to_deactivate = [coupon.code for coupon in available_coupons]
            
            random.shuffle(prizes_to_award)
            random.shuffle(available_coupons)

            actual_winners_count = min(len(prizes_to_award), len(available_coupons))

            for i in range(actual_winners_count):
                winning_coupon = available_coupons[i]
                awarded_prize = prizes_to_award[i]

                awarded_prize.winner_coupon = winning_coupon
                awarded_prize.save()
                
                winning_coupon.is_used = True
                winning_coupon.save()
                
                async_to_sync(notify_winner_task)(
                    bot_token=BOT_TOKEN, 
                    chat_id=winning_coupon.owner.id,
                    prize_description=awarded_prize.description, 
                    raffle_name=raffle.name
                )
                
            if coupon_ids_to_deactivate: 
                Coupon.objects.filter(code__in=coupon_ids_to_deactivate).update(is_used=True)

            
            raffle.is_finished = True
            raffle.save()
            
            self.message_user(request, f"–†–æ–∑—ã–≥—Ä—ã—à '{raffle.name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω! –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {actual_winners_count}.")


admin.site.register(FAQ)
