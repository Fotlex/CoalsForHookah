import os

from asgiref.sync import sync_to_async

from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from django.conf import settings
from bot.keyboards import *
from panel.models import User, Coupon, Raffle

router = Router()


class StateCode(StatesGroup):
    wait_code = State()


MAIN_TEXT = '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π BauBau_bot!

–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥ —Å –ø–∞—á–∫–∏ —É–≥–ª—è BauBau –∏ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤. 

‚û°Ô∏è –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚û°Ô∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
‚û°Ô∏è –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–æ–Ω–æ–≤. –ë–æ–ª—å—à–µ —É–≥–ª—è ‚Äî –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–±–µ–¥—É!
‚û°Ô∏è –ò—Ç–æ–≥–∏ –ø–æ–¥–≤–æ–¥—è—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞

‚ùóÔ∏è–ß—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–¥–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥.'''


@sync_to_async
def get_latest_active_raffle_with_prizes():
    try:
        raffle = Raffle.objects.filter(is_finished=False).latest('created_at')
        
        prizes = raffle.prizes.all() 

        return raffle, list(prizes) 
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}") 
        return None, None



@router.message(CommandStart())
async def start_f(message: Message):
    await message.answer(text=MAIN_TEXT, reply_markup=main_keyboard)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω')
async def add_coupon_f(message: Message, state: FSMContext):
    photo_path = os.path.join(settings.MEDIA_ROOT, 'example', 'example_photo.jpg')
    photo_file = FSInputFile(photo_path)

    try:
        await message.answer_photo(
            photo=photo_file,
            caption='–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –Ω–∞ –≤–∞—à–µ–π —É–ø–∞–∫–æ–≤–∫–µ —É–≥–ª–µ–π, –Ω–∞ —Ñ–æ—Ç–æ –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞'
        )
    except Exception as e:
        await message.answer(
            text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –Ω–∞ –≤–∞—à–µ–π —É–ø–∞–∫–æ–≤–∫–µ —É–≥–ª–µ–π: '
        )

    await state.set_state(StateCode.wait_code)


@router.message(F.text, StateCode.wait_code)
async def test_code_f(message: Message, state: FSMContext, user: User):
    code = message.text
    await state.clear()

    try:
        coupon = await Coupon.objects.select_related('owner').aget(code=code)

        if coupon.owner is None:
            coupon.owner = user
            await coupon.asave()

            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º –¥–æ–±–∞–≤–ª–µ–Ω 1 –∫—É–ø–æ–Ω', reply_markup=main_keyboard)
            return
        
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª —É–∫–∞–∑–∞–Ω', reply_markup=main_keyboard)

    except Coupon.DoesNotExist:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥', reply_markup=main_keyboard)


@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ')
async def info_f(message: Message):
    raffle, prizes = await get_latest_active_raffle_with_prizes() 

    if raffle and prizes: 
        prizes_text = "\n".join([f"  - {p.description}" for p in prizes])
        
        response_text = (
            f" **–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à:** {raffle.name} \n\n"
            f"*{raffle.description}*\n\n"
            f"üéÅ **–ü—Ä–∏–∑—ã:**\n"
            f"{prizes_text}"
        )
        await message.answer(response_text, parse_mode="Markdown")
        
    elif raffle and not prizes: 
        response_text = (
            f" **–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à:** {raffle.name} \n\n"
            f"*{raffle.description}*\n\n"
            f"–í —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∑–æ–≤. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        )
        await message.answer(response_text, parse_mode="Markdown")

    else: 
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")


@router.message(F.text == '–ú–æ–∏ –∫—É–ø–æ–Ω—ã')
async def my_f(message: Message, user: User):
    try:
        active_coupons = await sync_to_async(list)(
            Coupon.objects.filter(owner=user, is_used=False)
        )
        
        if not active_coupons:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.")
            return

        total_coupons_count = len(active_coupons)
        
        header = f"üëã <b>{user.first_name}</b>!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –∫—É–ø–æ–Ω–æ–≤: <b>{total_coupons_count}</b>\n\n"
        
        coupon_list_items = ""
        for coupon in active_coupons:
            coupon_list_items += f"üî∏ <code>{coupon.code}</code>\n"

        response_text = header + coupon_list_items
        
        await message.answer(response_text, parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∫—É–ø–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")











